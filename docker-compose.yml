version: "3.8"

# Complete infrastructure for all case studies
# Start all: docker-compose up -d
# Start specific: docker-compose up -d postgres-shard-0 postgres-shard-1

services:
  # ==================== CASE STUDY 1.1: Database Sharding ====================
  # 4 PostgreSQL shards for horizontal partitioning

  postgres-shard-0:
    image: postgres:16.3-alpine3.20
    container_name: postgres-shard-0
    environment:
      POSTGRES_DB: shard_0
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - shard0_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-shard-1:
    image: postgres:16.3-alpine3.20
    container_name: postgres-shard-1
    environment:
      POSTGRES_DB: shard_1
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - shard1_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-shard-2:
    image: postgres:16.3-alpine3.20
    container_name: postgres-shard-2
    environment:
      POSTGRES_DB: shard_2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - shard2_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-shard-3:
    image: postgres:16.3-alpine3.20
    container_name: postgres-shard-3
    environment:
      POSTGRES_DB: shard_3
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5436:5432"
    volumes:
      - shard3_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== CASE STUDY 1.2: Master-Slave Replication ====================
  # Master database for writes, slaves for reads

  postgres-master:
    image: postgres:16.3-alpine3.20
    container_name: postgres-master
    environment:
      POSTGRES_DB: main_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5440:5432"
    networks:
      - app-network
    command: |
      postgres
      -c wal_level=replica
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby=on
    volumes:
      - master_data:/var/lib/postgresql/data
      - ./high-traffic-nestjs/scripts/replication/setup-master.sh:/docker-entrypoint-initdb.d/setup-master.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-slave-1:
    image: postgres:16.3-alpine3.20
    container_name: postgres-slave-1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      MASTER_HOST: postgres-master
      MASTER_PORT: 5432
      REPLICATION_USER: replicator
      REPLICATION_PASSWORD: replicator_password
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5441:5432"
    networks:
      - app-network
    depends_on:
      postgres-master:
        condition: service_healthy
    volumes:
      - slave1_data:/var/lib/postgresql/data
      - ./high-traffic-nestjs/scripts/replication/setup-slave.sh:/usr/local/bin/setup-slave.sh
    entrypoint: ["/usr/local/bin/setup-slave.sh"]

  postgres-slave-2:
    image: postgres:16.3-alpine3.20
    container_name: postgres-slave-2
    environment:
      POSTGRES_DB: main_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      MASTER_HOST: postgres-master
      MASTER_PORT: 5432
      REPLICATION_USER: replicator
      REPLICATION_PASSWORD: replicator_password
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5442:5432"
    networks:
      - app-network
    depends_on:
      postgres-master:
        condition: service_healthy
    volumes:
      - slave2_data:/var/lib/postgresql/data
      - ./high-traffic-nestjs/scripts/replication/setup-slave.sh:/usr/local/bin/setup-slave.sh
    entrypoint: ["/usr/local/bin/setup-slave.sh"]

  # ==================== CASE STUDY 1.3: Redis Caching ====================
  # Redis master + replicas for high availability

  redis-node-1:
    image: redis:7-alpine
    container_name: redis-node-1
    command: >
      redis-server
      --port 6379
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --requirepass redis123
      --masterauth redis123
    ports:
      - "6379:6379"
      - "16379:16379"
    volumes:
      - redis_node1_data:/data
    networks:
      - app-network

  redis-node-2:
    image: redis:7-alpine
    container_name: redis-node-2
    command: >
      redis-server
      --port 6379
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --requirepass redis123
      --masterauth redis123
    ports:
      - "6380:6379"
      - "16380:16379"
    volumes:
      - redis_node2_data:/data
    networks:
      - app-network

  redis-node-3:
    image: redis:7-alpine
    container_name: redis-node-3
    command: >
      redis-server
      --port 6379
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --requirepass redis123
      --masterauth redis123
    ports:
      - "6381:6379"
      - "16381:16379"
    volumes:
      - redis_node3_data:/data
    networks:
      - app-network

  redis-node-4:
    image: redis:7-alpine
    container_name: redis-node-4
    command: >
      redis-server
      --port 6379
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --requirepass redis123
      --masterauth redis123
    ports:
      - "6382:6379"
      - "16382:16379"
    volumes:
      - redis_node4_data:/data
    networks:
      - app-network

  redis-node-5:
    image: redis:7-alpine
    container_name: redis-node-5
    command: >
      redis-server
      --port 6379
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --requirepass redis123
      --masterauth redis123
    ports:
      - "6383:6379"
      - "16383:16379"
    volumes:
      - redis_node5_data:/data
    networks:
      - app-network

  redis-node-6:
    image: redis:7-alpine
    container_name: redis-node-6
    command: >
      redis-server
      --port 6379
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --requirepass redis123
      --masterauth redis123
    ports:
      - "6384:6379"
      - "16384:16379"
    volumes:
      - redis_node6_data:/data
    networks:
      - app-network

  # ============================================
  # REDIS CLUSTER SETUP (One-time initialization)
  # ============================================
  redis-cluster-init:
    image: redis:7-alpine
    container_name: redis-cluster-init
    command: >
      sh -c "
      sleep 5 &&
      redis-cli -a redis123 --cluster create
      redis-node-1:6379
      redis-node-2:6379
      redis-node-3:6379
      redis-node-4:6379
      redis-node-5:6379
      redis-node-6:6379
      --cluster-replicas 1
      --cluster-yes
      "
    networks:
      - app-network
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6

  # # ==================== CASE STUDY 2.1: RabbitMQ ====================
  # # Message queue for async processing

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # # ==================== CASE STUDY 2.2: Kafka + Zookeeper ====================
  # # Event streaming platform

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # # ==================== MONITORING (Optional but Recommended) ====================

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3100:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - prometheus

  # Redis exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    environment:
      REDIS_ADDR: redis-master:6379
      REDIS_PASSWORD: redis123
    ports:
      - "9121:9121"
    networks:
      - app-network

  # PostgreSQL exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres-shard-0:5432/shard_0?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - app-network
    depends_on:
      - postgres-shard-0

# ==================== NETWORKS ====================
networks:
  app-network:
    driver: bridge

# ==================== VOLUMES ====================
volumes:
  # PostgreSQL
  shard0_data:
  shard1_data:
  shard2_data:
  shard3_data:

  # Replication
  master_data:
  slave1_data:
  slave2_data:

  # Redis
  redis_node1_data:
  redis_node2_data:
  redis_node3_data:
  redis_node4_data:
  redis_node5_data:
  redis_node6_data:

  # Message Queue
  rabbitmq_data:

  # Kafka
  kafka_data:
  zookeeper_data:
  zookeeper_logs:

  # Monitoring
  prometheus_data:
  grafana_data:
